/// Copyright 2014-2015 Red Hat, Inc. and/or its affiliates
/// and other contributors as indicated by the @author tags.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///   http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.


var Main;
(function (Main) {
    Main.pluginName = "fabric8-console";
    Main.log = Logger.get(Main.pluginName);
    Main.templatePath = "plugins/main/html";
    Main.chatServiceName = "letschat";
    Main.grafanaServiceName = "grafana";
    Main.appLibraryServiceName = "app-library";
})(Main || (Main = {}));

var Main;
(function (Main) {
    Main._module = angular.module(Main.pluginName, []);
    var tab = undefined;
    Main._module.config(["$locationProvider", "$routeProvider", "HawtioNavBuilderProvider", function ($locationProvider, $routeProvider, builder) {
    }]);
    Main._module.run(["$rootScope", "HawtioNav", "KubernetesModel", "ServiceRegistry", "Logger", "Configuration", function ($rootScope, nav, KubernetesModel, ServiceRegistry, Logger, Configuration) {
        if (Configuration.platform === 'fabric8') {
            var apiEndpointConfig = Configuration.api.endpoint.toLowerCase();
            var dynamicEndpoint;
            $rootScope.$on('kubernetesModelUpdated', function () {
                if (apiEndpointConfig.indexOf("dynamic") === 0) {
                    var namespace = KubernetesModel.currentNamespace();
                    var hasService = ServiceRegistry.hasService("apiman");
                    if (hasService === true && namespace !== null) {
                        var service = KubernetesModel.getService(namespace, "apiman");
                        Logger.debug("apiman route: " + service.$connectUrl);
                        Logger.debug("apiman proxyUrl: " + service.proxyUrl);
                        Logger.debug("apiman serviceUrl: " + service.$serviceUrl);
                        if (apiEndpointConfig === "dynamicServiceUrl") {
                            dynamicEndpoint = service.$serviceUrl + "apiman";
                        }
                        else if (apiEndpointConfig === "dynamicProxyUrl") {
                            dynamicEndpoint = service.proxyUrl + "apiman";
                        }
                        else {
                            dynamicEndpoint = service.$connectUrl + "apiman";
                        }
                        if (Configuration.api.endpoint !== dynamicEndpoint) {
                            Configuration.api.endpoint = dynamicEndpoint;
                            Logger.debug("apiman route: {0}", service.$connectUrl);
                            Logger.debug("apiman proxyUrl: {0} ", service.proxyUrl);
                            Logger.debug("apiman serviceUrl: {0}", service.$serviceUrl);
                            Logger.info("Apiman Dynamic Endpoint: {0}", dynamicEndpoint);
                        }
                    }
                    else {
                        Configuration.api.endpoint = "no-apiman-running-in-" + namespace + "-namespace";
                    }
                }
            });
        }
        nav.on(HawtioMainNav.Actions.CHANGED, Main.pluginName, function (items) {
            items.forEach(function (item) {
                switch (item.id) {
                    case 'forge':
                    case 'jvm':
                    case 'wiki':
                    case 'docker-registry':
                        item.isValid = function () { return false; };
                }
            });
        });
        nav.add({
            id: 'library',
            title: function () { return 'Library'; },
            tooltip: function () { return 'View the library of applications'; },
            isValid: function () { return ServiceRegistry.hasService(Main.appLibraryServiceName) && ServiceRegistry.hasService("app-library-jolokia") && !Core.isRemoteConnection(); },
            href: function () { return "/wiki/view"; },
            isActive: function () { return false; }
        });
        var kibanaServiceName = Kubernetes.kibanaServiceName;
        nav.add({
            id: 'kibana',
            title: function () { return 'Logs'; },
            tooltip: function () { return 'View and search all logs across all containers using Kibana and ElasticSearch'; },
            isValid: function () { return ServiceRegistry.hasService(kibanaServiceName) && !Core.isRemoteConnection(); },
            href: function () { return Kubernetes.kibanaLogsLink(ServiceRegistry); },
            isActive: function () { return false; }
        });
        nav.add({
            id: 'apiman',
            title: function () { return 'API Management'; },
            tooltip: function () { return 'Add Policies and Plans to your APIs with Apiman'; },
            isValid: function () { return ServiceRegistry.hasService('apiman') && !Core.isRemoteConnection(); },
            href: function () { return "/api-manager"; }
        });
        nav.add({
            id: 'grafana',
            title: function () { return 'Metrics'; },
            tooltip: function () { return 'Views metrics across all containers using Grafana and InfluxDB'; },
            isValid: function () { return ServiceRegistry.hasService(Main.grafanaServiceName) && !Core.isRemoteConnection(); },
            href: function () { return ServiceRegistry.serviceLink(Main.grafanaServiceName); },
            isActive: function () { return false; }
        });
        nav.add({
            id: "chat",
            title: function () { return 'Chat'; },
            tooltip: function () { return 'Chat room for discussing this namespace'; },
            isValid: function () { return ServiceRegistry.hasService(Main.chatServiceName) && !Core.isRemoteConnection(); },
            href: function () {
                var answer = ServiceRegistry.serviceLink(Main.chatServiceName);
                if (answer) {
                }
                return answer;
            },
            isActive: function () { return false; }
        });
        Main.log.debug("loaded");
    }]);
    hawtioPluginLoader.addModule(Main.pluginName);
})(Main || (Main = {}));

//# sourceMappingURL=data:application/json;base64,